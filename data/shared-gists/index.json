{
  "gists": [
    {
      "url": "https://api.github.com/gists/adc1617d6884dfbf93e961876efb27ef",
      "forks_url": "https://api.github.com/gists/adc1617d6884dfbf93e961876efb27ef/forks",
      "commits_url": "https://api.github.com/gists/adc1617d6884dfbf93e961876efb27ef/commits",
      "id": "adc1617d6884dfbf93e961876efb27ef",
      "node_id": "G_kwDOCePudtoAIGFkYzE2MTdkNjg4NGRmYmY5M2U5NjE4NzZlZmIyN2Vm",
      "git_pull_url": "https://gist.github.com/adc1617d6884dfbf93e961876efb27ef.git",
      "git_push_url": "https://gist.github.com/adc1617d6884dfbf93e961876efb27ef.git",
      "html_url": "https://gist.github.com/cordt-sei/adc1617d6884dfbf93e961876efb27ef",
      "files": {
        "EVMSheet.md": {
          "filename": "EVMSheet.md",
          "type": "text/markdown",
          "language": "Markdown",
          "raw_url": "https://gist.githubusercontent.com/cordt-sei/adc1617d6884dfbf93e961876efb27ef/raw/7b77b0be678862123305894d9ce09077d55022c8/EVMSheet.md",
          "size": 17413,
          "truncated": false,
          "content": "Template/Example sheet can be found [here](https://docs.google.com/spreadsheets/d/10MZE4LjMH0EXeDRGPyTprAt98aOVlDLaqnFjYbiKIDI/edit?usp=sharing).\nContributions welcome. Fork this gist and edit it then send it back or something I guess. (Why are gists forkable? Has anyone ever really used this?)\n\n```js\n////////////////////////////////////////////////////////////////////////////////\n// Contract Info Fetching & Updating Script for Google Sheets\n// -----------------------------------------------------------\n// This script helps fetch contract metadata (Name, ABI, Symbol, Decimals)\n// for each row in a Google Sheet that has a contract address.\n//\n// Main Functions:\n//  1) updateContractInfo()       – Only fills in missing Name/ABI\n//  2) updateContractInfoForce()  – Overwrites Name/ABI for all rows\n//  3) sortSheet()                – Sorts by Project Name (A), then Contract Name (C)\n//  4) removeDuplicateRows()      – Removes duplicates based on (A,B)\n//  5) onOpen()                   – Adds a custom menu in Google Sheets\n//  6) evmCall() / tryStandardEvmInfo() \n//     – Fallback calls to a Sei-compatible EVM RPC if SeiTrace doesn’t have the data\n// \n// Usage:\n//  1. Open your spreadsheet\n//  2. Go to Extensions -> Apps Script\n//  3. Paste in this code (or add it to existing code)\n//  4. Reload your sheet\n//  5. Use the new \"Custom Scripts\" menu\n////////////////////////////////////////////////////////////////////////////////\n\n\n/**\n * Fetches the ABI from SeiTrace for a given contract address.\n * If it fails, returns \"Invalid contract address.\"\n * \n * @param {string} contractAddress - The on-chain contract address \n *                                   (e.g., 0x..., case-insensitive).\n * @return {string} The ABI as a JSON string, or \"Invalid contract address\" on error.\n */\nfunction fetchAbi(contractAddress) {\n  if (!contractAddress) {\n    Logger.log(\"Empty contract address provided to fetchAbi.\");\n    return \"\";\n  }\n  \n  var url = \"https://seitrace.com/pacific-1/api/v2/smart-contracts/\" + contractAddress.toLowerCase();\n  try {\n    Logger.log(\"Fetching ABI for contract: \" + contractAddress);\n    var response = UrlFetchApp.fetch(url); // Standard URL fetch\n    var jsonData = JSON.parse(response.getContentText());\n    Logger.log(\"Successfully fetched ABI for contract: \" + contractAddress);\n    return JSON.stringify(jsonData.abi);\n  } catch (e) {\n    Logger.log(\"Error fetching ABI for contract: \" + contractAddress + \" - \" + e.message);\n    return \"Invalid contract address\";\n  }\n}\n\n/**\n * Fetches the Name from SeiTrace for a given contract address.\n * If not found or the response is empty, attempts an EVM fallback call \n * with tryStandardEvmInfo().\n * \n * @param {string} contractAddress - The on-chain contract address (0x...).\n * @return {string} The token or contract name, or \"Unknown\"/\"Invalid contract address\".\n */\nfunction fetchName(contractAddress) {\n  if (!contractAddress) {\n    Logger.log(\"Empty contract address provided to fetchName.\");\n    return \"\";\n  }\n\n  var url = \"https://seitrace.com/pacific-1/api/v2/smart-contracts/\" + contractAddress.toLowerCase();\n  try {\n    Logger.log(\"Fetching Name for contract: \" + contractAddress);\n    var response = UrlFetchApp.fetch(url);\n    var jsonData = JSON.parse(response.getContentText());\n    Logger.log(\"Successfully fetched Name for contract: \" + contractAddress);\n\n    // If SeiTrace returns a valid non-empty name, use it\n    if (jsonData.name && jsonData.name.trim() !== \"\") {\n      return jsonData.name;\n    } else {\n      // Otherwise, fallback to EVM call\n      Logger.log(\"No name found in SeiTrace for \" + contractAddress + \". Trying EVM fallback...\");\n      var evmInfo = tryStandardEvmInfo(contractAddress);\n\n      if (evmInfo && evmInfo.name) {\n        Logger.log(\"Recovered name from EVM fallback: \" + evmInfo.name);\n        return evmInfo.name;\n      } else {\n        return \"Unknown\";\n      }\n    }\n  } catch (e) {\n    Logger.log(\"Error fetching Name for contract: \" + contractAddress + \" - \" + e.message);\n    return \"Invalid contract address\";\n  }\n}\n\n/**\n * Attempts to update only missing contract Name (Column C) and ABI (Column D) \n * for each row that has a contract address in Column B. \n * Skips rows if Column B is empty or blank.\n * \n * Also sets \"NO DATA AVAILABLE\" if neither SeiTrace nor the EVM fallback can \n * provide any contract info or ABI data.\n */\nfunction updateContractInfo() {\n  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\n  var lastRow = sheet.getLastRow();\n  var updatedCount = 0;\n\n  for (var i = 2; i <= lastRow; i++) {\n    // B = Contract Address\n    var contractAddress = sheet.getRange(i, 2).getValue();\n    \n    // Skip if no address\n    if (!contractAddress || contractAddress.toString().trim() === \"\") {\n      continue;\n    }\n\n    // Force lowercase\n    contractAddress = contractAddress.toLowerCase();\n    sheet.getRange(i, 2).setValue(contractAddress);\n\n    var contractNameCell = sheet.getRange(i, 3); // C\n    var abiCell = sheet.getRange(i, 4);          // D\n\n    // --- Update Contract Name (if missing) ---\n    if (!contractNameCell.getValue() || contractNameCell.getValue().toString().trim() === \"\") {\n      // Attempt to fetch from SeiTrace first\n      var fallback = null;\n      var name = fetchName(contractAddress);\n      var symbol = \"\";\n      var decimals = null;\n\n      // If no luck or \"Unknown\", try EVM fallback\n      if (!name || name === \"Unknown\") {\n        fallback = tryStandardEvmInfo(contractAddress);\n        if (fallback && fallback.name) name = fallback.name;\n      }\n\n      // If fallback found symbol/decimals, gather them\n      if (fallback) {\n        if (fallback.symbol) symbol = fallback.symbol;\n        if (fallback.decimals !== null && fallback.decimals !== undefined) {\n          decimals = fallback.decimals;\n        }\n      }\n\n      // Prepare display label e.g. \"MyToken (SYM, decimals:18)\"\n      var label = name;\n      if (symbol || decimals !== null) {\n        var extras = [];\n        if (symbol) extras.push(symbol);\n        if (decimals !== null) extras.push(\"decimals:\" + decimals);\n        label += \" (\" + extras.join(\", \") + \")\";\n      }\n\n      // If label is still empty or \"Unknown\", mark NO DATA\n      if (!label || label === \"Unknown\") {\n        label = \"NO DATA AVAILABLE\";\n      }\n      // Additional check in case name is 'Unknown'\n      if (!name || name === \"Unknown\") {\n        label = \"NO DATA AVAILABLE\";\n      }\n\n      contractNameCell.setValue(label);\n      updatedCount++;\n\n      // Sleep 300ms to avoid rate-limits\n      Utilities.sleep(300);\n    }\n\n    // --- Update ABI (if missing) ---\n    if (!abiCell.getValue() || abiCell.getValue().toString().trim() === \"\") {\n      var abi = fetchAbi(contractAddress);\n      // Mark \"NO DATA AVAILABLE\" if invalid or unknown\n      if (!abi || abi === \"Invalid contract address\") {\n        abi = \"NO DATA AVAILABLE\";\n      }\n\n      // Double check in case it's still invalid \n      if (!abi || abi === \"Invalid contract address\") {\n        abi = \"NO DATA AVAILABLE\";\n      }\n\n      abiCell.setValue(abi);\n      updatedCount++;\n      Utilities.sleep(300);\n    }\n  }\n\n  // Show results to the user via a UI alert and console log\n  SpreadsheetApp.getUi().alert(\"Updated \" + updatedCount + \" missing contract fields.\");\n  Logger.log(\"Updated \" + updatedCount + \" missing contract fields.\");\n}\n\n/**\n * Force update for every row (2..lastRow), overwriting the Name (C) and ABI (D),\n * ignoring existing data. \n * \n * It also clears any \"NO DATA AVAILABLE\" cells before re-fetching, \n * so it can attempt to get new data for those addresses.\n */\nfunction updateContractInfoForce() {\n  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\n  var lastRow = sheet.getLastRow();\n  var updatedCount = 0;\n\n  // Clear old NO DATA AVAILABLE markers before forcing updates\n  for (var r = 2; r <= lastRow; r++) {\n    var nameCell = sheet.getRange(r, 3); // C\n    var abiCell = sheet.getRange(r, 4);  // D\n\n    if (nameCell.getValue() === \"NO DATA AVAILABLE\") {\n      nameCell.setValue(\"\");\n    }\n    if (abiCell.getValue() === \"NO DATA AVAILABLE\") {\n      abiCell.setValue(\"\");\n    }\n  }\n\n  // Now process each row, forcing re-fetch\n  for (var i = 2; i <= lastRow; i++) {\n    var contractAddress = sheet.getRange(i, 2).getValue();\n    if (!contractAddress || contractAddress.toString().trim() === \"\") {\n      continue;\n    }\n\n    // Lowercase + set in column B\n    contractAddress = contractAddress.toLowerCase();\n    sheet.getRange(i, 2).setValue(contractAddress);\n\n    // Attempt to fetch from SeiTrace or EVM fallback\n    var fallback = null;\n    var name = fetchName(contractAddress);\n    var symbol = \"\";\n    var decimals = null;\n\n    if (!name || name === \"Unknown\") {\n      fallback = tryStandardEvmInfo(contractAddress);\n      if (fallback && fallback.name) name = fallback.name;\n    }\n\n    if (fallback) {\n      if (fallback.symbol) symbol = fallback.symbol;\n      if (fallback.decimals !== null && fallback.decimals !== undefined) {\n        decimals = fallback.decimals;\n      }\n    }\n\n    var label = name;\n    if (symbol || decimals !== null) {\n      var extras = [];\n      if (symbol) extras.push(symbol);\n      if (decimals !== null) extras.push(\"decimals:\" + decimals);\n      label += \" (\" + extras.join(\", \") + \")\";\n    }\n\n    if (!label || label === \"Unknown\") {\n      label = \"NO DATA AVAILABLE\";\n    }\n\n    // Overwrite column C (Name)\n    sheet.getRange(i, 3).setValue(label);\n    updatedCount++;\n    Utilities.sleep(300);\n\n    // Overwrite column D (ABI)\n    var abi = fetchAbi(contractAddress);\n    if (!abi || abi === \"Invalid contract address\") {\n      abi = \"NO DATA AVAILABLE\";\n    }\n    sheet.getRange(i, 4).setValue(abi);\n    updatedCount++;\n    Utilities.sleep(300);\n  }\n\n  SpreadsheetApp.getUi().alert(\"Force updated \" + updatedCount + \" contract fields.\");\n  Logger.log(\"Force updated \" + updatedCount + \" contract fields.\");\n}\n\n/**\n * Sorts the active sheet by Column A (Project Name), then by Column C (Contract Name).\n * It only sorts if there's data beyond the first row (header).\n */\nfunction sortSheet() {\n  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\n  var lastRow = sheet.getLastRow();\n  var lastCol = sheet.getLastColumn();\n\n  // Only sort if there's actual data\n  if (lastRow > 1) {\n    // Sort range from row 2 downward, across all columns\n    var range = sheet.getRange(2, 1, lastRow - 1, lastCol);\n    range.sort([\n      { column: 1, ascending: true },  // Column A: Project Name\n      { column: 3, ascending: true }   // Column C: Contract Name\n    ]);\n  }\n}\n\n/**\n * Removes duplicate rows based on columns A (Project Name) and B (Contract Address).\n * For each group of duplicates, keeps only the row(s) with the largest number of \n * non-empty cells.\n */\nfunction removeDuplicateRows() {\n  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\n  var lastRow = sheet.getLastRow();\n  var lastCol = sheet.getLastColumn();\n\n  if (lastRow < 2) {\n    return; // No data\n  }\n\n  // Fetch everything (headers included)\n  var data = sheet.getRange(1, 1, lastRow, lastCol).getValues();\n\n  // Helper: count how many non-empty cells are in a row\n  function countNonEmpty(rowArr) {\n    var count = 0;\n    for (var i = 0; i < rowArr.length; i++) {\n      if (rowArr[i] !== \"\" && rowArr[i] != null) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  // We'll store the best row(s) for each (ProjectName, ContractAddress)\n  var bestRowsByAB = {};\n\n  // data[0] is the header row\n  for (var i = 1; i < data.length; i++) {\n    var row = data[i];\n    var aVal = row[0]; // A = Project Name\n    var bVal = row[1]; // B = Contract Address\n\n    var key = aVal + \"___\" + bVal;\n    var filledCount = countNonEmpty(row);\n    var rowIndexInSheet = i + 1; // Because i=0 is the header in data[]\n\n    if (!bestRowsByAB[key]) {\n      bestRowsByAB[key] = [{ rowIndex: rowIndexInSheet, filledCount: filledCount }];\n    } else {\n      var currentBest = bestRowsByAB[key];\n      // Find the highest 'filledCount' so far\n      var maxCount = currentBest[0].filledCount;\n      for (var j = 1; j < currentBest.length; j++) {\n        if (currentBest[j].filledCount > maxCount) {\n          maxCount = currentBest[j].filledCount;\n        }\n      }\n\n      if (filledCount > maxCount) {\n        // This row is strictly better, replace\n        bestRowsByAB[key] = [{ rowIndex: rowIndexInSheet, filledCount: filledCount }];\n      } else if (filledCount === maxCount) {\n        // Tie: keep both\n        bestRowsByAB[key].push({ rowIndex: rowIndexInSheet, filledCount: filledCount });\n      }\n    }\n  }\n\n  // Collect all row indices that we want to keep\n  var keepers = {};\n  for (var k in bestRowsByAB) {\n    bestRowsByAB[k].forEach(function(obj) {\n      keepers[obj.rowIndex] = true;\n    });\n  }\n\n  // Remove rows from the bottom up if they're not in keepers\n  for (var rowToCheck = lastRow; rowToCheck >= 2; rowToCheck--) {\n    if (!keepers[rowToCheck]) {\n      sheet.deleteRow(rowToCheck);\n    }\n  }\n}\n\n/**\n * Make a direct 'eth_call' to the contract, using a known methodId (4-byte signature).\n * For instance, 0x06fdde03 is 'name()', 0x95d89b41 is 'symbol()', 0x313ce567 is 'decimals()'.\n * \n * Appends ?x-apikey=... so we can use the Sei EVM RPC.\n * \n * @param {string} contractAddress - EVM-compatible contract address\n * @param {string} methodId        - The first 4 bytes of the method signature, e.g. '0x06fdde03'\n * @return {string|null}           - Hex data returned by the call, or null if it fails\n */\nfunction evmCall(contractAddress, methodId) {\n  var payload = {\n    jsonrpc: \"2.0\",\n    method: \"eth_call\",\n    params: [\n      {\n        to: contractAddress,\n        data: methodId\n      },\n      \"latest\"\n    ],\n    id: 1\n  };\n\n  var options = {\n    method: \"post\",\n    contentType: \"application/json\",\n    payload: JSON.stringify(payload)\n  };\n\n  try {\n    var response = UrlFetchApp.fetch(\"https://evm-rpc.sei-apis.com\", options);\n    var result = JSON.parse(response.getContentText()).result;\n    // If empty or just '0x', no data returned\n    if (!result || result === \"0x\") return null;\n    return result;\n  } catch (e) {\n    Logger.log(\"EVM call error for \" + contractAddress + \": \" + e.message);\n    return null;\n  }\n}\n\n/**\n * Decodes a hex-encoded UTF-8 string. This is useful for contract calls\n * like 'name()' or 'symbol()', which return the string in hex.\n * \n * @param {string} hex - The hex string (e.g., '0x123abc...') to decode to UTF-8\n * @return {string}    - The decoded string, or '(decode error)' on failure\n */\nfunction hexToUtf8(hex) {\n  try {\n    // Strip 0x prefix and trailing zeroes\n    hex = hex.replace(/^0x/, \"\").replace(/00+$/, \"\");\n    // Each 2 hex chars -> one byte -> convert to '%xx' for decodeURIComponent\n    return decodeURIComponent(hex.match(/.{1,2}/g).map(function(byte) {\n      return \"%\" + byte;\n    }).join(\"\"));\n  } catch (e) {\n    return \"(decode error)\";\n  }\n}\n\n/**\n * Attempts calls to 'name()', 'symbol()', and 'decimals()' for standard ERC-20 or ERC-721 tokens.\n * \n * @param {string} contract - The EVM contract address.\n * @return {Object}         - { name, symbol, decimals } or empty values if unknown\n */\nfunction tryStandardEvmInfo(contract) {\n  var nameHex = evmCall(contract, \"0x06fdde03\");   // name()\n  var symbolHex = evmCall(contract, \"0x95d89b41\"); // symbol()\n  var decimalsHex = evmCall(contract, \"0x313ce567\");// decimals()\n\n  var name = nameHex ? hexToUtf8(nameHex) : null;\n  var symbol = symbolHex ? hexToUtf8(symbolHex) : null;\n  var decimals = decimalsHex ? parseInt(decimalsHex, 16) : null;\n\n  return { name: name, symbol: symbol, decimals: decimals };\n}\n\n/**\n * Runs automatically when the Spreadsheet opens. \n * Adds our custom menu so users can run these functions from the Sheets UI.\n */\nfunction onOpen() {\n  var ui = SpreadsheetApp.getUi();\n  ui.createMenu('Custom Scripts')\n    .addItem('Update Contract Info (Missing Only)', 'updateContractInfo')\n    .addItem('Force Update Contract Info', 'updateContractInfoForce')\n    .addItem('Sort Sheet (A then C)', 'sortSheet')\n    .addItem('Remove Duplicate Rows', 'removeDuplicateRows')\n    .addItem('Normalize Project Contracts', 'normalizeFromSourceToAppsContracts')\n    .addToUi();\n}\n```\n\n### Additional Notes\n\n1. **Skipping Cells**  \n   - Rows that have `\"NO DATA AVAILABLE\"` or any non-empty values in **Name (C)** or **ABI (D)** are skipped by `updateContractInfo()` on future runs. This avoids unnecessary repeated calls.\n\n2. **Force Update**  \n   - `updateContractInfoForce()` **clears any `\"NO DATA AVAILABLE\"`** from Columns C & D before re-fetching data, so it can try new queries in case the issue was temporary.\n\n3. **Rate Limiting**  \n   - There is a `Utilities.sleep(300)` call after each fetch to avoid hitting rate limits. If the script times out (Google Apps Script has a 6-minute limit per execution), simply **re-run** it. It will skip any rows already filled in.\n\n4. **Sorting & De-Duplicating**  \n   - `sortSheet()` sorts by column A (Project Name), then by column C (Contract Name).\n   - `removeDuplicateRows()` removes extra rows that share the same (A,B) but have fewer filled cells.\n\n5. **EVM Fallback**  \n   - If SeiTrace fails to provide a name, the script calls `tryStandardEvmInfo()` and attemps to retrieve `name`, `symbol`, and `decimals` from the contract’s ERC interface using a standard EVM RPC endpoint.\n",
          "encoding": "utf-8"
        }
      },
      "public": true,
      "created_at": "2025-04-08T22:45:44Z",
      "updated_at": "2025-04-08T22:45:44Z",
      "description": "Google Sheets App Script to fetch EVM contract and token infos as available from some block explorer API",
      "comments": 0,
      "user": null,
      "comments_enabled": true,
      "comments_url": "https://api.github.com/gists/adc1617d6884dfbf93e961876efb27ef/comments",
      "owner": {
        "login": "cordt-sei",
        "id": 165932662,
        "node_id": "U_kgDOCePudg",
        "avatar_url": "https://avatars.githubusercontent.com/u/165932662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cordt-sei",
        "html_url": "https://github.com/cordt-sei",
        "followers_url": "https://api.github.com/users/cordt-sei/followers",
        "following_url": "https://api.github.com/users/cordt-sei/following{/other_user}",
        "gists_url": "https://api.github.com/users/cordt-sei/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/cordt-sei/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/cordt-sei/subscriptions",
        "organizations_url": "https://api.github.com/users/cordt-sei/orgs",
        "repos_url": "https://api.github.com/users/cordt-sei/repos",
        "events_url": "https://api.github.com/users/cordt-sei/events{/privacy}",
        "received_events_url": "https://api.github.com/users/cordt-sei/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "forks": [],
      "history": [
        {
          "user": {
            "login": "cordt-sei",
            "id": 165932662,
            "node_id": "U_kgDOCePudg",
            "avatar_url": "https://avatars.githubusercontent.com/u/165932662?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cordt-sei",
            "html_url": "https://github.com/cordt-sei",
            "followers_url": "https://api.github.com/users/cordt-sei/followers",
            "following_url": "https://api.github.com/users/cordt-sei/following{/other_user}",
            "gists_url": "https://api.github.com/users/cordt-sei/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cordt-sei/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cordt-sei/subscriptions",
            "organizations_url": "https://api.github.com/users/cordt-sei/orgs",
            "repos_url": "https://api.github.com/users/cordt-sei/repos",
            "events_url": "https://api.github.com/users/cordt-sei/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cordt-sei/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "version": "7a5acfafde32e267e8bc1ebe66e302377a8e5e18",
          "committed_at": "2025-04-08T22:45:44Z",
          "change_status": {
            "total": 494,
            "additions": 494,
            "deletions": 0
          },
          "url": "https://api.github.com/gists/adc1617d6884dfbf93e961876efb27ef/7a5acfafde32e267e8bc1ebe66e302377a8e5e18"
        }
      ],
      "truncated": false,
      "sharedId": "91f372c0-9498-43f3-8eea-cc4b2deba4f8",
      "sharedAt": "2025-04-16T18:51:04.116Z",
      "updatedAt": "2025-04-16T18:51:04.116Z",
      "userId": 165932662,
      "username": "cordt-sei"
    }
  ],
  "lastUpdated": "2025-04-16T18:51:04.116Z"
}